{"ast":null,"code":"import Movie from \"../classes/movie.js\";\nimport Config from \"../config.js\";\nimport { required, maxLength, between } from \"vuelidate/lib/validators\";\nconst axios = require(\"axios\");\nconst buttonText = new Map([[\"add\", \"Dodaj film\"], [\"edit\", \"Wprowadź zmiany\"]]);\nexport default {\n  name: \"MovieModal\",\n  data() {\n    return {\n      title: \"\",\n      year: 0,\n      id: 0,\n      movieOriginal: new Movie()\n    };\n  },\n  validations: {\n    title: {\n      required,\n      maxLength: maxLength(200)\n    },\n    year: {\n      required,\n      between: between(1900, 2100)\n    }\n  },\n  props: [\"mode\", \"selectedMovie\"],\n  methods: {\n    close() {\n      this.$emit(\"closeModal\");\n    },\n    getButtonText() {\n      console.log(this.mode);\n      return buttonText.get(this.mode);\n    },\n    async submit() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      try {\n        let data = JSON.stringify(new Movie(this.title, this.year));\n        switch (this.mode) {\n          case \"add\":\n            await axios.post(Config.api, data, {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            break;\n          case \"edit\":\n            await axios.put(Config.api + \"/\" + this.id, data, {\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n            break;\n        }\n      } catch (err) {\n        this.$emit(\"error\", err.message);\n      }\n      this.$v.$reset();\n      this.close();\n    }\n  },\n  watch: {\n    selectedMovie(m) {\n      this.title = m.title;\n      this.year = m.year;\n      this.id = m.id;\n      this.movieOriginal = {\n        ...m\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"AAsGA,OAAOA,KAAI,MAAO,qBAAqB;AACvC,OAAOC,MAAK,MAAO,cAAc;AACjC,SAASC,QAAQ,EAAEC,SAAS,EAAEC,OAAM,QAAS,0BAA0B;AACvE,MAAMC,KAAI,GAAIC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,UAAS,GAAI,IAAIC,GAAG,CAAC,CACzB,CAAC,KAAK,EAAE,YAAY,CAAC,EACrB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAC5B,CAAC;AAEF,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,CAAC;MACPC,EAAE,EAAE,CAAC;MACLC,aAAa,EAAE,IAAId,KAAK;IAC1B,CAAC;EACH,CAAC;EACDe,WAAW,EAAE;IACXJ,KAAK,EAAE;MACLT,QAAQ;MACRC,SAAS,EAAEA,SAAS,CAAC,GAAG;IAC1B,CAAC;IACDS,IAAI,EAAE;MACJV,QAAQ;MACRE,OAAO,EAAEA,OAAO,CAAC,IAAI,EAAE,IAAI;IAC7B;EACF,CAAC;EACDY,KAAK,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC;EAChCC,OAAO,EAAE;IACPC,KAAK,GAAG;MACN,IAAI,CAACC,KAAK,CAAC,YAAY,CAAC;IAC1B,CAAC;IACDC,aAAa,GAAG;MACdC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,IAAI,CAAC;MACtB,OAAOhB,UAAU,CAACiB,GAAG,CAAC,IAAI,CAACD,IAAI,CAAC;IAClC,CAAC;IACD,MAAME,MAAM,GAAG;MACb,IAAI,CAACC,EAAE,CAACC,MAAM,EAAE;MAChB,IAAI,IAAI,CAACD,EAAE,CAACE,QAAQ,EAAE;QACpB;MACF;MACA,IAAI;QACF,IAAIlB,IAAG,GAAImB,IAAI,CAACC,SAAS,CAAC,IAAI9B,KAAK,CAAC,IAAI,CAACW,KAAK,EAAE,IAAI,CAACC,IAAI,CAAC,CAAC;QAC3D,QAAQ,IAAI,CAACW,IAAI;UACf,KAAK,KAAK;YACR,MAAMlB,KAAK,CAAC0B,IAAI,CAAC9B,MAAM,CAAC+B,GAAG,EAAEtB,IAAI,EAAE;cACjCuB,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB;YAChD,CAAC,CAAC;YACF;UACF,KAAK,MAAM;YACT,MAAM5B,KAAK,CAAC6B,GAAG,CAACjC,MAAM,CAAC+B,GAAE,GAAI,GAAE,GAAI,IAAI,CAACnB,EAAE,EAAEH,IAAI,EAAE;cAChDuB,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB;YAChD,CAAC,CAAC;YACF;QAAK;MAEX,EAAE,OAAOE,GAAG,EAAE;QACZ,IAAI,CAAChB,KAAK,CAAC,OAAO,EAAEgB,GAAG,CAACC,OAAO,CAAC;MAClC;MACA,IAAI,CAACV,EAAE,CAACW,MAAM,EAAE;MAChB,IAAI,CAACnB,KAAK,EAAE;IACd;EACF,CAAC;EACDoB,KAAK,EAAE;IACLC,aAAa,CAACC,CAAC,EAAE;MACf,IAAI,CAAC7B,KAAI,GAAI6B,CAAC,CAAC7B,KAAK;MACpB,IAAI,CAACC,IAAG,GAAI4B,CAAC,CAAC5B,IAAI;MAClB,IAAI,CAACC,EAAC,GAAI2B,CAAC,CAAC3B,EAAE;MACd,IAAI,CAACC,aAAY,GAAI;QAAE,GAAG0B;MAAE,CAAC;IAC/B;EACF;AACF,CAAC","names":["Movie","Config","required","maxLength","between","axios","require","buttonText","Map","name","data","title","year","id","movieOriginal","validations","props","methods","close","$emit","getButtonText","console","log","mode","get","submit","$v","$touch","$invalid","JSON","stringify","post","api","headers","put","err","message","$reset","watch","selectedMovie","m"],"sourceRoot":"","sources":["C:\\Users\\jozwi\\source\\repos\\MyMovies\\Web\\my-movies\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <div class=\"modal-background\" @click=\"close\"></div>\n    <form class=\"modal-content box\" @submit.prevent=\"submit\">\n      <div v-show=\"mode == 'edit'\" class=\"content has-text-centered my-5\">\n        <p class=\"is-size-4\">\n          Edytujesz film {{ movieOriginal.title }} ({{ movieOriginal.year }})\n        </p>\n      </div>\n\n      <div class=\"columns my-3 mx-2\">\n        <div\n          class=\"field column is-half form-group\"\n          :class=\"{ 'form-group--error': $v.title.$error }\"\n        >\n          <label class=\"label\">{{\n            mode == \"edit\" ? \"Nowy tytuł\" : \"Tytuł\"\n          }}</label>\n          <div class=\"control\">\n            <input\n              class=\"input form-control\"\n              :class=\"\n                $v.title.$dirty && (!$v.title.required || !$v.title.maxLength)\n                  ? 'is-danger'\n                  : ''\n              \"\n              :disabled=\"mode == 'preview'\"\n              type=\"text\"\n              v-model=\"title\"\n            />\n          </div>\n          <p\n            class=\"help is-danger\"\n            v-if=\"!$v.title.required && $v.title.$dirty\"\n          >\n            Pole wymagane\n          </p>\n          <p\n            class=\"help is-danger\"\n            v-if=\"!$v.title.maxLength && $v.title.$dirty\"\n          >\n            Tytuł filmu może mieć maksymalnie\n            {{ $v.title.$params.maxLength.max }} znaków\n          </p>\n        </div>\n\n        <div\n          class=\"field column is-half form-group\"\n          :class=\"{ 'form-group--error': $v.year.$error }\"\n        >\n          <label class=\"label\">{{\n            mode == \"edit\" ? \"Nowy rok wydania\" : \"Rok wydania\"\n          }}</label>\n          <div class=\"control\">\n            <input\n              class=\"input\"\n              :class=\"\n                $v.year.$dirty && (!$v.year.required || !$v.year.between)\n                  ? 'is-danger'\n                  : ''\n              \"\n              :disabled=\"mode == 'preview'\"\n              type=\"number\"\n              v-model=\"year\"\n            />\n          </div>\n          <p\n            class=\"help is-danger\"\n            v-if=\"!$v.year.required && $v.year.$dirty\"\n          >\n            Pole wymagane\n          </p>\n          <p class=\"help is-danger\" v-if=\"!$v.year.between && $v.year.$dirty\">\n            Rok wydania musi mieścić się w zakresie od\n            {{ $v.year.$params.between.min }} do\n            {{ $v.year.$params.between.max }} roku\n          </p>\n        </div>\n      </div>\n\n      <div class=\"columns is-centered\" v-show=\"mode != 'preview'\">\n        <div class=\"control column has-text-centered\">\n          <input\n            type=\"button\"\n            class=\"button m-2\"\n            @click=\"close\"\n            value=\"Anuluj\"\n          />\n          <input\n            type=\"submit\"\n            class=\"button is-primary m-2\"\n            :value=\"getButtonText()\"\n          />\n        </div>\n      </div>\n\n      <button class=\"modal-close is-large\" @click=\"close\"></button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport Movie from \"../classes/movie.js\";\nimport Config from \"../config.js\";\nimport { required, maxLength, between } from \"vuelidate/lib/validators\";\nconst axios = require(\"axios\");\n\nconst buttonText = new Map([\n  [\"add\", \"Dodaj film\"],\n  [\"edit\", \"Wprowadź zmiany\"],\n]);\n\nexport default {\n  name: \"MovieModal\",\n  data() {\n    return {\n      title: \"\",\n      year: 0,\n      id: 0,\n      movieOriginal: new Movie(),\n    };\n  },\n  validations: {\n    title: {\n      required,\n      maxLength: maxLength(200),\n    },\n    year: {\n      required,\n      between: between(1900, 2100),\n    },\n  },\n  props: [\"mode\", \"selectedMovie\"],\n  methods: {\n    close() {\n      this.$emit(\"closeModal\");\n    },\n    getButtonText() {\n      console.log(this.mode);\n      return buttonText.get(this.mode);\n    },\n    async submit() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      try {\n        let data = JSON.stringify(new Movie(this.title, this.year));\n        switch (this.mode) {\n          case \"add\":\n            await axios.post(Config.api, data, {\n              headers: { \"Content-Type\": \"application/json\" },\n            });\n            break;\n          case \"edit\":\n            await axios.put(Config.api + \"/\" + this.id, data, {\n              headers: { \"Content-Type\": \"application/json\" },\n            });\n            break;\n        }\n      } catch (err) {\n        this.$emit(\"error\", err.message);\n      }\n      this.$v.$reset();\n      this.close();\n    },\n  },\n  watch: {\n    selectedMovie(m) {\n      this.title = m.title;\n      this.year = m.year;\n      this.id = m.id;\n      this.movieOriginal = { ...m };\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}